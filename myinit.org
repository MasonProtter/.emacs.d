#+STARTUP: overview


* Repos
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)

(setq package-archives
      '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
        ("MELPA Stable" . "https://stable.melpa.org/packages/")
        ("MELPA"        . "https://melpa.org/packages/")
		("nongnu" . "https://elpa.nongnu.org/nongnu/"))
      package-archive-priorities
      '(("MELPA Stable" . 10)
        ("GNU ELPA"     . 5)
        ("MELPA"        . 1)
		("nongnu"       . 0)))

(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;; Boostrap `straight.el`
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+END_SRC

#+RESULTS:
: t

* Paths
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
  	(exec-path-from-shell-initialize)))
#+END_SRC





* Treesit-auto

#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (global-treesit-auto-mode))
#+end_src

* Eat

#+begin_src emacs-lisp
;; (use-package eat
;;   :ensure t
;;   :config
;;   (setq eat-term-name "xterm-256color"))


(straight-use-package
 '(eat :type git
       :host codeberg
       :repo "akib/emacs-eat"
       :files ("*.el" ("term" "term/*.el") "*.texi"
               "*.ti" ("terminfo/e" "terminfo/e/*")
               ("terminfo/65" "terminfo/65/*")
               ("integration" "integration/*")
               (:exclude ".dir-locals.el" "*-tests.el"))))

(setq eat-term-name "xterm-256color")

#+end_src


* Key Config
** General

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t)

(use-package general
  :ensure t
  :init
  (which-key-mode)

  (defconst my-leader [escape])

  (general-create-definer my-leader-def
    ;; :prefix my-leader
    ;; or without a variable
    :prefix [escape])

  (which-key-add-key-based-replacements
    "<escape> f" "files"
    "<escape> fd" "dotfile"
    "<escape> fc" "config files"
    "<escape> <SPC>" "M-x"
    "<escape> o" "open"
    "<escape> m" "mode"
    "<escape> l" "LaTeX"
    "<escape> lp" "preview"
    "<escape> r" "remove")

  (defun select-current-line ()
    "Select the current line"
    (interactive)
    (end-of-line) ; move to end of line
    (set-mark (line-beginning-position)))


  (defun remove-newlines-in-region ()
    "Removes all newlines in the region."
    (interactive)
    (save-restriction
      (narrow-to-region (point) (mark))
      (goto-char (point-min))
      (while (search-forward "\n" nil t) (replace-match " " nil t))))

  (my-leader-def
    "<SPC>" 'helm-M-x
    "ff" 'helm-find-files
    "fd" '(lambda () (interactive) (find-file "~/.emacs.d/myinit.org"))
    "fc" '(lambda () (interactive) (find-file config-directory))
    "s" 'save-buffer
    "oe" 'eshell
    "os" 'shell
    "ot" 'term
    "b"  'switch-to-buffer
    "l"  'select-current-line
    "t"  'iterm-send-text
    "rq" 'remove-newlines-in-region
	;; "j" 'julia-snail
	;; "e" 'eat
	)

  (my-leader-def 
    :keymaps 'LaTeX-mode-map
    "mc" 'TeX-command-master
    "mv" 'TeX-view
    "mpb" 'preview-buffer
    "mpr" 'preview-region
    "mps" 'preview-section
    "mpe" 'preview-environment
    "mpd" 'preview-document
    "me"  'LaTeX-environment)

  (general-define-key 
   "s-c" 'kill-ring-save
   "s-x" 'kill-region
   "s-v" 'yank
   "s-b" 'yank-pop)

  (defun org-select-block-and-send-to-julia-repl()
    (interactive)
    (org-babel-mark-block)
    (julia-repl-send-region-or-line))

  (my-leader-def
    :keymaps 'org-mode-map
    "q" 'org-fill-paragraph
    "cc" 'julia-repl-send-region-or-line
    "cr" 'org-select-block-and-send-to-julia-repl
	"v" 'org-redisplay-inline-images))

#+END_SRC
** Multiple-Cursors
#+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
  :ensure t
  :init
  (general-define-key
   "C-M-<mouse-1>" 'mc/add-cursor-on-click
   "C-M-S-s-<mouse-1>" 'mc/add-cursor-on-click))

#+END_SRC

** Misc.
Don't add C-<backspace>'d words to kill ring
#+BEGIN_SRC emacs-lisp

(defun is-in-gui()
  (display-graphic-p))
(defmacro when-gui (&rest body)
  "Works just like `progn' but will only evaluate expressions in VAR when Emacs is running in a GUI else just nil."
  `(when (is-in-gui) ,@body))
(defmacro when-not-gui (&rest body)
  `(when (not (is-in-gui)) ,@body))


(defun backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))

(general-define-key 
 "C-<backspace>" 'backward-delete-word)

;; use option key for meta
(setq mac-option-modifier 'meta)


(when-not-gui
 (defvar personal/fast-keyseq-timeout 200)

 (defun personal/-tty-ESC-filter (map)
   (if (and (equal (this-single-command-keys) [?\e])
	    (sit-for (/ personal/fast-keyseq-timeout 1000.0)))
       [escape] map))

 (defun personal/-lookup-key (map key)
   (catch 'found
     (map-keymap (lambda (k b) (if (equal key k) (throw 'found b))) map)))

 (defun personal/catch-tty-ESC ()
   "Setup key mappings of current terminal to turn a tty's ESC into `escape'."
   (when (memq (terminal-live-p (frame-terminal)) '(t pc))
     (let ((esc-binding (personal/-lookup-key input-decode-map ?\e)))
       (define-key input-decode-map
	 [?\e] `(menu-item "" ,esc-binding :filter personal/-tty-ESC-filter)))))

 (personal/catch-tty-ESC))



#+END_SRC
 Make it so that selected text gets deleted if I start typing

#+BEGIN_SRC emacs-lisp

(delete-selection-mode 1)

#+END_SRC

* Region Wrap
#+BEGIN_SRC emacs-lisp

(use-package wrap-region
  :ensure t
  :init
  (wrap-region-global-mode t))

#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :straight t
  :ensure t
  :init
  (general-define-key 
   "M-x" #'helm-M-x
   "C-x r b" #'helm-filtered-bookmarks
   "C-x C-f" #'helm-find-files
   "M-y" 'helm-show-kill-ring)
  (helm-mode 1))


#+END_SRC

* vterm
#+begin_src elisp
;; (use-package vterm
;;     :ensure t)
;; (setq vterm-kill-buffer-on-exit nil)

;; (use-package multi-vterm 
;;   :ensure t)

#+end_src


* Doom-Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :init
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)  ; all-the-icons fonts must be installed!
  (doom-themes-org-config))


(defun is-in-gui()
  (display-graphic-p))
(defmacro when-gui (&rest body)
  "Works just like `progn' but will only evaluate expressions in VAR when Emacs is running in a GUI else just nil."
  `(when (is-in-gui) ,@body))

(when-gui
 (toggle-scroll-bar -1) 
 (tool-bar-mode -1))


#+END_SRC

* Undo-Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

* Prog modes
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :defer t)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

* TeX
#+BEGIN_SRC emacs-lisp

(use-package reftex
  :ensure t)

(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (custom-set-variables '(LaTeX-command "latex -synctex=1"))

  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 
   'LaTeX-mode-hook
   (lambda ()
     (company-mode)
     (setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq TeX-save-query nil)
     (setq TeX-PDF-mode t)
     ;; (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
     ;; (setq TeX-view-program-list
     ;; 	   '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
     (setq TeX-source-correlate-mode t)
     (setq TeX-view-evince-keep-focus nil)
	 )

   ;; to use pdfview with auctex
   ;; (setq TeX-view-program-selection  '((output-pdf "PDF Viewer")) 
   ;; 		 TeX-source-correlate-start-server t)
   ;; (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))

   )

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
			#'TeX-revert-document-buffer)

  (add-hook 'TeX-after-compilation-finished-functions
			#'TeX-revert-document-buffer)



  
  ;; ;; to use pdfview with auctex
  ;; (add-hook 'LaTeX-mode-hook 'pdf-tools-install)
  ;; (add-hook 'LaTeX-mode-hook #'toggle-word-wrap)

  ;; ;; to use pdfview with auctex
  ;; (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
  ;; 	TeX-source-correlate-start-server t)
  ;; (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))

  ;; (use-package company-auctex
  ;;   :ensure t)
  ;; (company-auctex-init)
  )
#+END_SRC


* Okular
#+begin_src emacs-lisp
;; (setq TeX-view-program-list '(("Okular" "okular --unique %u")))

;; (add-hook 'LaTeX-mode-hook #'(lambda ()
;;                   (add-to-list 'TeX-expand-list
;;                        '("%u" Okular-make-url))))

;; (defun Okular-make-url () (concat
;;                "file://"
;;                (expand-file-name (funcall file (TeX-output-extension) t)
;;                          (file-name-directory (TeX-master-file)))
;;                "#src:"
;;                (TeX-current-line)
;;                (expand-file-name (TeX-master-directory))
;;                "./"
;;                (TeX-current-file-name-master-relative)))

;; (setq TeX-view-program-selection '((output-pdf "Okular")))
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-start-server t)
(setq TeX-view-program-list (quote (("Okular" "okular --unique %o#src:%n%b"))))
(setq TeX-view-program-selection (quote ((engine-omega "dvips and gv") (output-dvi "xdvi") (output-pdf "Okular") (output-html "xdg-open"))))

#+end_src


* julia-vterm
#+begin_src elisp
;; (use-package julia-vterm
;;   :ensure t)
;; (use-package ob-julia-vterm
;;   :ensure t)
;; #(package-install-file ".emacs.d/ob-julia-vterm.el/ob-julia-vterm.el")

;; (setq julia-vterm-repl-program "~/julia/./julia")

;; (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)

#+end_src

#+RESULTS:
: org-babel-julia-vterm--make-str-to-run



* Code Cells

#+begin_src elisp
;; (use-package code-cells
;;   :ensure t
;;   :hook (julia-mode . code-cells-mode)
;;   :config
;;   (add-to-list 'code-cells-eval-region-commands '(julia-snail-mode . julia-snail-send-code-cell)))
#+end_src

* Quarto

#+begin_src elisp
;; (use-package quarto-mode
;;   :ensure t)
#+end_src

* Markdown
#+begin_src elisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Julia
#+BEGIN_SRC emacs-lisp
(use-package julia-mode
  :straight '(julia-mode)
  :init
  (general-define-key
   :keymaps 'julia-mode-map
   ;; see https://github.com/JuliaEditorSupport/julia-emacs/pull/196
   "TAB" 'julia-latexsub-or-indent
   )
  )

(use-package julia-repl
  :straight '(julia-repl :type git :host github :repo "duzaichuan/julia-repl" :branch "master")
  :ensure t
  :init
  (add-hook 'julia-mode-hook 'julia-repl-mode)
  ;;(add-hook 'julia-mode-hook 'company-mode)
  ;;(add-hook 'julia-mode-hook 'texfrag-mode)
  (setq julia-repl-executable-records
		'((default "julia")))

  ;;   (setq julia-repl-switches "-O3")
  (setenv "JULIA_NUM_THREADS" "6")
  ;; (my-leader-def
  ;;   :keymaps 'org-mode-map
  ;;   "s"  'julia-repl-send-region-or-line)

  (my-leader-def
    "s"  'julia-repl-send-region-or-line)
  )
(julia-repl-set-terminal-backend 'eat)

;; (julia-repl-set-terminal-backend 'vterm)

;; (use-package julia-mode
;;   :ensure t)

#+END_SRC

#+RESULTS:

* emacs-jupyter

#+BEGIN_SRC emacs-lisp
(use-package popup
  :ensure t)

(use-package jupyter
  :ensure t
  ;; :straight t
  ;; :straight (jupyter :type git :host github :branch "org-element-cache-issue" :repo "akirakyle/emacs-jupyter")
  :config
  (require 'jupyter-julia)
  (setq jupyter-eval-short-result-display-function 'popup-tip)
  (add-hook 'jupyter-repl-mode-hook 'rainbow-delimiters-mode-enable)
  ;; (setq jupyter-use-zmq nil)
  
  )


;; (defun my-jupyter-api-http-request--ignore-login-error-a
;;     (func url endpoint method &rest data)
;;   (cond
;;    ((member endpoint '("login"))
;;     (ignore-error (jupyter-api-http-error)
;;       (apply func url endpoint method data)))
;;    (:else
;;     (apply func url endpoint method data))))
;; (advice-add
;;  #'jupyter-api-http-request
;;  :around #'my-jupyter-api-http-request--ignore-login-error-a)

#+END_SRC



* julia-snail



#+begin_src elisp
;; (straight-use-package 'julia-snail)

;; (setq julia-snail-executable "~/julia-1.10/./julia")
;; (add-hook 'julia-mode-hook #'julia-snail-mode)

;; (use-package julia-snail
;;   ;; :ensure t
;;   :straight t
;;   :custom
;;   (julia-snail-terminal-type :eat)
;;   (julia-snail-executable "julia")
;;   ;; (julia-snail-extensions '(ob-julia))
;;   (julia-snail-multimedia-enable t)
;;   (julia-snail-popup-display-eval-results nil)
;;   (julia-snail-show-error-window nil)
;;   ;; (julia-snail/ob-julia-capture-io t)
;;   ;; (julia-snail/ob-julia-mirror-output-in-repl t)
;;   ;; (julia-snail/ob-julia-use-error-pane nil)
;;   :config
;;   (add-hook 'julia-mode-hook #'julia-snail-mode))


;; (defun julia-snail--show-globals ()
;;   (interactive)
;; 	(julia-snail--send-to-server (julia-snail--module-at-point) "names(@__MODULE__)"))


;; display/update images in the buffer after I evaluate
;; (add-hook 'julia-snail/ob-julia--around-ctrl-c-ctrl-c 'org-display-inline-images 'append)


#+end_src


* Ob-julia

#+begin_src emacs-lisp
;; (straight-use-package
;;  '(ob-julia :type git :host github :repo "karthink/ob-julia"))


;; (add-to-list 'load-path "~/.emacs.d/ob-julia/ob-julia-snail.el")
;; (add-to-list 'load-path "~/.emacs.d/ob-julia/")
;; (require 'ob-julia)
;; (customize-set-variable 'org-babel-julia-backend 'julia-snail)


#+end_src


* Pluto.jl
#+begin_src emacs-lisp
(use-package plutojl-mode
  :straight (plutojl-mode :type git :host github :repo "torfjelde/plutojl-mode.el"))

#+end_src

** Ox-Pluto

#+begin_src emacs-lisp
(straight-use-package
 '(ox-pluto :type git :host github :repo "tecosaur/ox-pluto"))
#+end_src


* Org


#+BEGIN_SRC emacs-lisp

;; (with-eval-after-load "org"
(setq org-src-fontify-natively t
	  org-src-tab-acts-natively t
	  org-confirm-babel-evaluate nil
	  org-edit-src-content-indentation 0)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (jupyter . t)
   (julia . t)
   (shell . t)
   (eshell . t)
   ;; (julia-vterm . t)
   ))
;; (org-babel-jupyter-override-src-block "julia")
;; (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
;; (defalias 'org-babel-variable-assignments:julia 'org-babel-variable-assignments:julia-vterm)



(setq org-confirm-babel-evaluate nil)

;; Type C-c C-, to open the template options
;; (add-to-list 'org-structure-template-alist
;; 	       '("jj"  . "src jupyter-julia"))


(add-to-list 'org-structure-template-alist
			 '("j"  . "src julia"))
(add-to-list 'org-structure-template-alist
			 '("el"  . "src emacs-lisp"))

(add-to-list 'org-structure-template-alist
			 '("ll"  . "LaTeX latex"))

(let ((default-args '((:async . "yes")
                      (:kernel . "julia-1.11")
					  (:exports . "both")
					  (:results . "scalar")
					  (:display . "text/org image text/markdown text/latex text/plain"))))
  (setq org-babel-default-header-args:jupyter-julia default-args)
  (setq org-babel-default-header-args:julia default-args)
  )




;; Use Python3 on macos
(when (memq window-system '(mac ns x))
  (progn (setenv "PATH" (concat "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages" ":" (getenv "PATH")))
		 (setq python-shell-interpreter "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3")))

(add-to-list 'safe-local-variable-values
			 '(eval add-hook 'after-save-hook
					(lambda () (org-babel-tangle))
					nil t))


;; Change latex image sizes 
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))


(defun my/org-mode-hook ()
  (set-face-attribute 'org-level-1 nil :height 1.25)
  (set-face-attribute 'org-level-2 nil :height 1.15)
  (set-face-attribute 'org-level-3 nil :height 1.05))
(add-hook 'org-load-hook #'my/org-mode-hook)
(add-hook 'org-mode-hook #'my/org-mode-hook)
(add-hook 'org-mode-hook #'toggle-word-wrap)

;; (defun org-babel-jupyter-handle-result-ansi-escapes ()
;;   (interactive)
;;   "Handle ANSI escapes in Jupyter src-block result."
;;   (when (and (org-babel-jupyter-language-p "julia") (org-babel-where-is-src-block-result))
;; 	(save-excursion
;; 	  (goto-char (org-babel-where-is-src-block-result))
;; 	  (ansi-color-filter-region (point) (org-babel-result-end)))))

;; (defun org-babel-jupyter-handle-result-ansi-escapes ()
;;   "Handle ANSI escapes in Jupyter src-block result."
;;   ;; (org-babel-map-src-blocks nil
;;   ;;   (when (org-babel-jupyter-language-p lang)
;;   ;;     (goto-char (org-babel-where-is-src-block-result))
;;   ;;     (ansi-color-apply-on-region (point) (org-babel-result-end))))
;;   (org-babel-jupyter-strip-ansi-escapes 'julia)
;;   )

;; (add-hook 'org-babel-after-execute-hook #'org-babel-jupyter-handle-result-ansi-escapes)

;; (add-hook 'org-babel-after-execute-hook #'org-babel-jupyter-handle-result-ansi-escapes)

;; (remove-hook 'org-babel-after-execute-hook #'org-babel-jupyter-handle-result-ansi-escapes)

;; (require 'ansi-color)
;; (defun display-ansi-colors ()
;;   (interactive)
;;   (ansi-color-apply-on-region (point-min) (point-max)))


;; (add-hook 'org-babel-after-execute-hook 'display-ansi-colors)
;; #'(lambda () (run-with-timer 0.1 nil #'display-ansi-colors)))

;; display/update images in the buffer after I evaluate
(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)



;; (setq warning-suppress-types
;; 	  (append warning-suppress-types '((org-element-cache))))



;; display/update images in the buffer after I evaluate
;; (add-hook 'org-babel-after-execute-hook
;; 		  #'(lambda () (run-with-timer 0.1 nil #'org-redisplay-inline-images)))
;; (eval-after-load 'org
;;   (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))


#+END_SRC

LaTeX macros in HTML export: https://emacs.stackexchange.com/questions/54703/exporting-latex-commands-to-html-mathjax

#+begin_src emacs-lisp
(add-to-list 'org-src-lang-modes '("latex-macros" . latex))

(defvar org-babel-default-header-args:latex-macros
  '((:results . "raw")
    (:exports . "results")))

(defun prefix-all-lines (pre body)
  (with-temp-buffer
    (insert body)
    (string-insert-rectangle (point-min) (point-max) pre)
    (buffer-string)))

(defun org-babel-execute:latex-macros (body _params)
  (concat
   (prefix-all-lines "#+LATEX_HEADER: " body)
   "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
   (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
   "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))

#+end_src

#+RESULTS:
: org-babel-execute:latex-macros

#+begin_src emacs-lisp
(require 'ox)
(defun org-html-export-to-mhtml-and-open (async subtree visible body)
  (cl-letf (((symbol-function 'org-html--format-image) 'format-image-inline))
    (org-open-file (org-html-export-to-html nil subtree visible body))))

(defun org-html-export-to-mhtml (async subtree visible body)
  (cl-letf (((symbol-function 'org-html--format-image) 'format-image-inline))
    (org-html-export-to-html nil subtree visible body)))

(defun format-image-inline (source attributes info)
  (let* ((ext (file-name-extension source))
         (prefix (if (string= "svg" ext) "data:image/svg+xml;base64," "data:;base64,"))
         (data (with-temp-buffer (url-insert-file-contents source) (buffer-string)))
         (data-url (concat prefix (base64-encode-string data)))
         (attributes (org-combine-plists `(:src ,data-url) attributes)))
    (org-html-close-tag "img" (org-html--make-attribute-string attributes) info)))

(org-export-define-derived-backend 'html-inline-images 'html
				   :menu-entry '(?h "Export to HTML" ((?m "As MHTML file" org-html-export-to-mhtml)
								      (?M "As MHTML file and open" org-html-export-to-mhtml-and-open))))



#+end_src

* HTMLize
#+BEGIN_SRC emacs-lisp

(use-package htmlize
  :ensure t
  :defer t)

#+END_SRC

* Flyspell

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/usr/bin/aspell")

(let ((langs '("american" "deutsch")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))

(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))

(global-set-key [f6] 'cycle-ispell-languages)

#+END_SRC

* Neotree

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))


(use-package neotree
  :ensure t
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (global-set-key [f8] 'neotree-toggle))


#+end_src

* Ligature

#+BEGIN_SRC emacs-lisp

(use-package ligature
  :ensure t
  :config
  (let ((ligs '("->" "=>" "|>" "<|" "::" "<--" "-->" "<-->")))
	  (ligature-set-ligatures 'prog-mode ligs)
	  (ligature-set-ligatures 'org-mode ligs))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))


#+END_SRC

* Nix
#+begin_src elisp
(use-package nix-mode
  :mode "\\.nix\\'"
  :ensure t)
#+end_src

* Typst

#+begin_src elisp
;; (use-package typst-ts-mode
;;   :straight '(typst-ts-mode :type git :host sourcehut :repo "meow_king/typst-ts-mode"))

;; (add-to-list 'treesit-language-source-alist
;;              '(typst "https://github.com/uben0/tree-sitter-typst"))
;; (treesit-install-language-grammar 'typst)

#+end_src



* Misc

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 1)

(electric-pair-mode t)
(defvar latex-electric-pairs 
  '((\left . \right)) "Electric pairs for latex.")

;; (defun latex-add-electric-pairs ()
;;   (setq-local electric-pair-pairs 
;; 	      (append electric-pair-pairs latex-electric-pairs))
;;   (setq-local electric-pair-text-pairs electric-pair-pairs))

;; (remove-hook 'latex-mode-hook 'org-add-electric-pairs)


;; Global company mode
(add-hook 'after-init-hook 'global-company-mode)

(add-hook 'emacs-mode-hook 'ac-capf-setup)

(add-to-list 'default-frame-alist
             '(font . "JuliaMono-11"))

(set-fontset-font "fontset-default"  '(#xe000 . #xf8ff) "JuliaMono-11")
(set-fontset-font "fontset-default" 'symbol "Noto Color Emoji")

(setq mac-command-modifier 'control)

(use-package smartparens
  :ensure t)
(require 'smartparens-config)
(smartparens-global-mode t)


(defun remove-ansi-color ()
  (interactive)
  (save-excursion
	(ansi-color-filter-region (region-beginning) (region-end))))

(defun remove-ansi-color-whole-buffer ()
  (interactive)
  (save-excursion
	(mark-whole-buffer)
	(ansi-color-filter-region (region-beginning) (region-end))))



#+END_SRC
