#+STARTUP: overview
* Repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
* Paths
#+BEGIN_SRC emacs-lisp
(load-library "url-handlers")
(add-to-list 'load-path "~/.emacs.d/packages/evil-leader/")
(add-to-list 'load-path "~/.emacs.d/packages/evil/")
(add-to-list 'load-path "~/.emacs.d/packages/emacs-grammarly/")
(add-to-list 'load-path "~/.emacs.d/packages/")

(defconst home-directory "/users/mason/")
(defconst emacs-directory (concat home-directory ".emacs.d/"))
(defconst config-directory (concat emacs-directory "config/"))
#+END_SRC
* Key Config
** Evil
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/evil")
(require 'evil)
(evil-mode 1)
#+END_SRC

** Evil-Leader
#+BEGIN_SRC emacs-lisp
(require 'evil-leader)
(global-evil-leader-mode)
(which-key-mode)


(evil-leader/set-leader "<SPC>")
(which-key-add-key-based-replacements
  "<SPC>f" "files"
  "<SPC>fd" "dotfile"
  "<SPC>fc" "config files"
  "<SPC><SPC>" "M-x"
  "<SPC>o" "open"
  "<SPC>m" "mode"
  "<SPC>l" "LaTeX"
  "<SPC>lp" "preview")

(evil-leader/set-key
  "<SPC>" 'helm-M-x
  "ff" 'helm-find-files
  "fd" '(lambda () (interactive) (find-file "~/.emacs.d/myinit.org"))
  "fc" '(lambda () (interactive) (find-file config-directory))
  "s" 'save-buffer
  "oe" 'eshell
  "os" 'shell
  "b"  'switch-to-buffer)

(evil-leader/set-key-for-mode 'latex-mode
  "mc" 'TeX-command-master
  "mv" 'TeX-view
  "mpb" 'preview-buffer
  "mpr" 'preview-region
  "mps" 'preview-section
  "mpe" 'preview-environment
  "mpd" 'preview-document
  "me"  'LaTeX-environment)

(evil-leader/set-key-for-mode 'julia-mode
  "mc" 'julia-repl-send-region-or-line
  "md" 'julia-repl-doc)


(global-set-key (kbd "s-c") 'kill-ring-save)
(global-set-key (kbd "s-x") 'kill-region)
(global-set-key (kbd "s-v") 'yank)
(global-set-key (kbd "s-b") 'yank-pop)
#+END_SRC
** Region Wrap
#+BEGIN_SRC emacs-lisp
(require 'wrap-region)
(wrap-region-global-mode t)
#+END_SRC
** Multiple-Cursors
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C-M-<mouse-1>") 'mc/add-cursor-on-click)
#+END_SRC
** Misc.
Don't add M-<backspace>'d words to kill ring
#+BEGIN_SRC emacs-lisp
(defun backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))
(global-set-key (kbd "A-<backspace>") 'backward-delete-word)
#+END_SRC

 Make it so that sleected text gets deleted if I start typing
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(helm-mode 1)
#+END_SRC

* Doom-Theme
#+BEGIN_SRC emacs-lisp
;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme
(doom-themes-neotree-config)  ; all-the-icons fonts must be installed!

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)





;; Remove crap
(toggle-scroll-bar -1) 
(tool-bar-mode -1)



#+END_SRC
* Undo-Tree
#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC

* Applications
** TeX
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "/Library/TeX/texbin" ":" (getenv "PATH")))


(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (company-mode)
	      (setq TeX-auto-save t)
	      (setq TeX-parse-self t)
	      (setq TeX-save-query nil)
	      (setq TeX-PDF-mode t)
	      (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
	      (setq TeX-view-program-list
		    '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
	     (setq  TeX-view-evince-keep-focus nil)))

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
          #'TeX-revert-document-buffer)

(add-hook 'TeX-after-compilation-finished-functions
	  #'TeX-revert-document-buffer)
;; to use pdfview with auctex
(add-hook 'LaTeX-mode-hook 'pdf-tools-install)

;; to use pdfview with auctex
(setq TeX-view-program-selection '((output-pdf "pdf-tools"))
       TeX-source-correlate-start-server t)
(setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))

#+END_SRC
** Grammarly
#+BEGIN_SRC emacs-lisp
(require 'emacs-grammarly)
(global-set-key (kbd "C-c C-g") 'grammarly-save-region-and-run)
#+END_SRC
** Org 
#+BEGIN_SRC emacs-lisp
    (require 'ob-ipython)
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((ipython . t)
        ;; other languages..
        ))
    (setq ob-ipython-resources-dir "/Users/mason/Documents/ob_ipython_resources/")
    (define-key evil-normal-state-map (kbd "M-<return>") 'org-babel-execute-src-block)
    (define-key evil-insert-state-map (kbd "M-<return>") 'org-babel-execute-src-block)
    ;; don't prompt me to confirm everytime I want to evaluate a block
    (setq org-confirm-babel-evaluate nil)


(exec-path-from-shell-initialize)
(setenv "PATH" (concat "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages" ":" (getenv "PATH")))

(setq python-shell-interpreter "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3")


(defun org-export-remove-prelim-headlines (tree backend info)
  "Remove headlines tagged \"prelim\" while retaining their
contents before any export processing."
  (org-element-map tree org-element-all-elements
    (lambda (object)
      (when (and (equal 'headline (org-element-type object))
                 (member "prelim" (org-element-property :tags object)))
        (mapc (lambda (el)
                ;; recursively promote all nested headlines
                (org-element-map el 'headline
                  (lambda (el)
                    (when (equal 'headline (org-element-type el))
                      (org-element-put-property el
                        :level (1- (org-element-property :level el))))))
                (org-element-insert-before el object))
              (cddr object))
        (org-element-extract-element object)))
    info nil org-element-all-elements)
  tree)
(add-hook 'org-export-filter-parse-tree-functions
           'org-export-remove-prelim-headlines)

#+END_SRC
** Eshell
#+BEGIN_SRC emacs-lisp
;; (setq eshell-cmpl-cycle-completions nil)
;; (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point) 
(add-hook 'eshell-mode-hook
          (lambda () 
            (define-key eshell-mode-map (kbd "<tab>")
              (lambda () (interactive) (pcomplete-std-complete)))))
#+END_SRC
** Julia
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/Users/mason/julia-repl")
(require 'julia-repl)
(add-hook 'julia-mode-hook 'julia-repl-mode)
(julia-repl-set-executable "/users/mason/julia/./julia")

(require 'iterm)
;;(add-hook 'julia-mode-hook 'iterm)
#+END_SRC
